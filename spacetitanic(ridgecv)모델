import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error,r2_score
from category_encoders import OneHotEncoder
from sklearn.linear_model import RidgeCV
train = pd.read_csv('/Users/tastebread/Desktop/kaggle/spacetitanic/train.csv')
test = pd.read_csv('/Users/tastebread/Desktop/kaggle/spacetitanic/test.csv')

print(train.shape,test.shape)

#결측치가 있는 행 제거
train = train.dropna(axis=0)
test = test.dropna(axis=0)

print(train.info())
print(train['Age'].mean())
#baseline 평가지표 계산 하는 함수
def calculate_baseline_score(train):
    mae = float("inf")
    r2 = -1

    target = 'Transported'
    y_train = train[target]
    predict = y_train.mean() #평균값을 기준모델로 설정
    y_pred = [predict] * len(y_train)
    mae = mean_absolute_error(y_train,y_pred)
    r2 = r2_score(y_train,y_pred)
    return mae,r2

mae,r2 = calculate_baseline_score(train)
print(f'mae : {mae:.5f}') #훈련데이터 에러
print(f'r2 : {r2:.5f}') # 훈련데이터 에러

#데이터를 기준에따라 나누기 (나이)
def split_data(train):
    condition = train.Age
    train = train[(train['Age'] >= 10) & (train['Age'] <= 45.0)]
    val = train[train['Age'] == 28.0]
    test = train[train['Age'] == 29.0]

    return train,val,test

train,val,test = split_data(train.copy())
print(train.shape,val.shape,test.shape)

#train,test,val(검증) 데이터 나누기

def divide_data(data):
    features = ['Age','VIP','HomePlanet']
    X = data[features]
    y = data['Transported']

    return X,y

X_train,y_train = divide_data(train)
X_val, y_val = divide_data(val)
X_test,y_test = divide_data(test)

#print(X_train.head(),X_val.head(),X_test.head())
#범주형 특성을 원핫인코딩으로 카테고리형 특성으로 바꾸기

def one_hot_encoding(X_train,X_val,X_test):
    encoder = OneHotEncoder(use_cat_names=True)
    X_train_encoded = encoder.fit_transform(X_train)
    X_val_encoded = encoder.transform(X_val)
    X_test_encoded = encoder.transform(X_test)

    return encoder,X_train_encoded,X_val_encoded,X_test_encoded

encoder,X_train_encoded,X_val_encoded,X_test_encoded = one_hot_encoding(X_train,X_val,X_test)
print(X_train_encoded)

#RidgeCV 모델 측정

def fit_ridge_regression(X_train_encoded,X_val_encoded,y_train,y_val):
    ridge = RidgeCV(alphas=np.arange(0.01,2,0.01),normalize=True,cv=5)
    mae = float("inf")
    r2 = -1

    ridge.fit(X_train_encoded,y_train)
    y_pred = ridge.predict(X_val_encoded)
    mae = mean_absolute_error(y_val,y_pred)
    r2 = r2_score(y_val,y_pred)

    return ridge,mae,r2

ridge,mae,r2 = fit_ridge_regression(X_train_encoded,X_val_encoded,y_train,y_val)
print(f'Alpha : {ridge.alpha_}')
print(f'cv best score : {ridge.best_score_}')
print(f'Ridge Regression 검증데이터 mae: {mae:.5f}')
print(f'Ridge Regression 검증데이터 r2: {r2:.5f}')

